
---------------- Vim help ----------------------------

motions
------------------------------------------------------
h / j / k / l           move left/down/up/right in normal mode
H / M / L               move cursor to highest/middle/lowest line

%                       jump to matching bracket (),[],{} even if cursor is not on the brakcet
w / W                   go to start of next word
e / E                   go to end of next word
b / B                   go to back to start of previous mode
f<char> / F<char>       go forward/back to next occurance of char
t<char> / T<char>       go till next/previous occurane of char
0 / $                   jump to start / end of line
gg / G                  go to start/end of file
gf                      jump to file under cursor
gd                      jump to definition of word under cursor (first occurance in a file)
C-6                     load previous previous buffer
C-o / C-i               jump out / jump in
C-] / C-t               jump to tag definition (in/out)
( / )                   jump to previous / next sentence
{ / }                   jump to previous / next paragraph
[[ / ]]                 jump to previous / next code block (first column has { )

window scrolling
C-b / C-f               whole page back/forward
C-u / C-d               half page up/down
C-y / C-e               one line up/down (explore higher Y vs expore extra)

window scrolling around the cursor
zz                      place cursor in middle of screen
zb                      place cursor at bottom of screen
zt                      place cursor at top of screen


copying and pasting text
------------------------------------------------------
y{motion}               yank text under motion
yy                      yank entire line
p / P                   paste after/before a cursor

changing text
------------------------------------------------------
i / a                   go to insert mode before/after cursor
I / A                   go to insert mode at start / end of line
c{motion}               cut text under motion and enter edit mode
cc						cut whole line and start insert mode with smart indent
d{motion}               delete text under motion
dd                      delete entire line
D                       delete till end of line
o / O                   insert new line after/before current and enter insert mode
={motion}               indent text
==                      indent current line
</>{motion}             shift(indent) left/right
<</>>					shift(indent) left/right whole line


insert and completion mode
------------------------------------------------------
C-w                     delete word before the cursor
C-u                     delete line before the cursor
C-r{register}           insert content of register
C-x C-y                 scroll down
C-x C-e                 scroll up
C-o                     execute single normal mode command and back to insert mode
    ex: C-o zz

C-n                     complete next word 
C-p                     complete previous word 
C-x C-f                 complete filename
C-x C-]                 complete from tags
C-x C-o                 complete from omnicmpletion
Pop menu keys:
C-n, C-p                move to next/previous suggestion
C-e                     end suggestion and keep typed text only
C-y                     accept current suggestion
Completions than can be 
called again to get effect of chain completion:
C-x C-n                 complete next word from current file
C-x C-p                 complete prev word from current file
C-x C-l                 comlete a whole line

visual selection mode
-------------------------------------------------------
v                       start visual selection
V                       start line-wise visual selection 
C-v                     start column-wise visual seletion
o                       move to other end of selection area
y / d / c               yank / delete / change the selection

windows
------------------------------------------------------
C-ws / C-wv             split horisontally/vertically and load current buffer
:sp / :vsp              split horisontally/vertically and load current buffer
:sp <file>              split horisontally and load file into a new window
:sf	<file>				split horisontally and :find <file>					
:enew                   load a new buffer in current window
C-wn / :new / :vnew     slpit horisontally/vertically and load a new buffer
C-wq / :close           close current window
C-w<arrow>              go to window according to direction
C-ww                    go to next window
C-wp                    go to last used window
C-w_                    set current window height to max
C-w|                    set current window width to max
C-w=                    make all windows equal size
C-wx                    exchange locations of two windows
C-wr                    rotate windows locations
C-w H/J/K/L             move current window left/down/up/right
:pclose					close preview window
:resize <num>			set size of window
:resize +/-<num>		increase/decrease size of window

marks
------------------------------------------------------
"" / ``                 go to last position in file (line/cursor)
". / `.                 go to last edit position in file (line/cursor)
"0 / `0                 go to last edit position in file (line/cursor) after exiting vim
`< / `>                 start / end of last visual selection
ma                      set mark 'a' on current position
"a / `a                 go to mark 'a' positon in file (line/cursor)
mA                      set global mark 'A' on current position
"A / `A                 go to mark 'A' positon globally (line/cursor)

registers
------------------------------------------------------
"{register}command      the structure of command that uses register
"ayy                    copy current line into register a                     
"ap                     paste from register a
""{command}             default register 
"0                      yank register
<C-r>{register}         paste contents of register in insert/command mode
v{select text}"+y       select text and copy it into system clipboard (paste with C-v)
"+p                     paste from system clipboard into vim

other commands
------------------------------------------------------
.                       redo last editing command
:                       enter command mode
r                       replace one char
u                       undo last editing
C-r                     redo
R                       enter replace mode 
g; / g,                 go to previous/next editing position
gi                      go to previous editing position and enter insert mode
gv                      select again last visual selection
C-g                     show filename and location in the file

folding
------------------------------------------------------
za                      toggle folding
zR                      reveal all folds
zM                      close all folds
:set nofoldenable
:set foldmethod=indent
:set foldlevel=10

vimgrep
------------------------------------------------------
:vim /{pattern}/[g][j] {path}  g-find all occurances, j-dont jump to first result
:vim /{pattern}/ src/**/*.h  search recursively in all header files under 'src' dir

quickfix window
---------------------------------------------------------
:copen / :ccl           open/close quickfix window
:cw                     open quickfix window if there any results (close it otherwise)
:cn / :cp				go to next/prev error
:cnf					go to the first error in the next file
:.cc					go to current error

diff mode
---------------------------------------------------------
vimdiff <file1> <file2>	start vim in diff mode
:diffthis				add current window to diff windows group
:diffoff				disable diff mode on current window
:diffoff!				disable diff mode on all windows
]c						next diff
[c						previous diff
do						obtain current diff from other side
:diffget				get current diff form other side (with range)
dp						put current diff to other side
:diffput				put current diff to other side (with range)

command mode
---------------------------------------------------------
:map                    show mapping keys
:read !<cmd>            read output of shell command
:!gcc % && ./a.out      compile and run command
C-f                     enter command window. enables to search/edit previous commands and execute them
:close                  close current window (command window too)
:quit                   close current window (and vim if it the last one)
:g/pattern				show all lines containg pattern
:<num>					jump to a line number <num>

vim help brousing
---------------------------------------------------------
:help :command
:help function()
:help 'option'
:help i_ctrl-a
:helpgrep foo
<C-]> / <C-t>           jump on an highlighted tag / jump back
